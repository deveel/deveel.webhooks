<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Webhooks.MongoDb</name>
    </assembly>
    <members>
        <member name="T:Deveel.Webhooks.IMongoDbWebhookContext">
            <summary>
            Represents an instance of the <see cref="T:MongoFramework.IMongoDbContext"/> that
            is specific for the Webhooks service.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.IMongoWebhookConverter`1">
            <summary>
            A service that is used to convert a webhook to an
            object that can be stored in a MongoDB database.
            </summary>
            <typeparam name="TWebhook">
            The type of webhook to convert.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.IMongoWebhookConverter`1.ConvertWebhook(`0)">
            <summary>
            Converts the given webhook to an object that can be stored
            in a MongoDB database.
            </summary>
            <param name="webhook">
            The instance of the webhook to be converted.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoWebhook"/>
            that can be stored in a MongoDB database.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookContext">
            <summary>
            A default instance of the <see cref="T:Deveel.Webhooks.IMongoDbWebhookContext"/> that
            is used to store the subscriptions and delivery results.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookContext.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions})">
            <summary>
            Creates an instance of the context with the given options.
            </summary>
            <param name="options">
            The options used to connect to the database.
            </param>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookContext.Options">
            <summary>
            Gets the options used to connect to the database.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookContext.OnConfigureMapping(MongoFramework.MappingBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2">
            <summary>
            An implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/> that
            is backed by a MongoDB database.
            </summary>
            <typeparam name="TWebhook">
            The type of webhook for which the delivery results are logged.
            </typeparam>
            <typeparam name="TResult">
            The type of delivery result to log.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.#ctor(Deveel.Webhooks.IWebhookDeliveryResultStoreProvider{`1},Deveel.Webhooks.IMongoWebhookConverter{`0},Microsoft.Extensions.Logging.ILogger{Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger{`0,`1}})">
            <summary>
            Constructs the logger with the given store provider
            used to resolve the MongoDB storage for the log.
            </summary>
            <param name="storeProvider">
            The provider of the store used to resolve the MongoDB storage
            where to log the delivery results.
            </param>
            <param name="webhookConverter">
            A service that is used to convert the webhook object to a MongoDB
            compatible object for storage.
            </param>
            <param name="logger">
            An optional logger to use to log messages emitted by this service.
            </param>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.StoreProvider">
            <summary>
            Gets the provider used to resolve the MongoDB storage where to log
            the delivery results.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.Logger">
            <summary>
            Gets the logger used to log messages emitted by this service.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertResult(Deveel.Webhooks.IWebhookSubscription,Deveel.Webhooks.WebhookDeliveryResult{`0})">
            <summary>
            Converts the given result to an object that can be stored in the
            MongoDB database collection.
            </summary>
            <param name="subscription">
            The subscription for which the delivery result is logged.
            </param>
            <param name="result">
            The result of the delivery of a webhook.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.CreateReceiver(Deveel.Webhooks.IWebhookSubscription)">
            <summary>
            Converts a subscription object to a receiver object that can be
            stored in the MongoDB database collection.
            </summary>
            <param name="subscription"></param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoWebhookReceiver"/> that can be
            stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertDeliveryAttempt(Deveel.Webhooks.WebhookDeliveryAttempt)">
            <summary>
            Converts the given delivery attempt to an object that can be stored
            </summary>
            <param name="attempt">
            The delivery attempt to convert.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertWebhook(`0)">
            <summary>
            Converts the given webhook to an object that can be stored in the
            MongoDB database collection.
            </summary>
            <param name="webhook">
            The instance of the webhook to convert.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the given type of webhook is not supported by this instance and
            no converter was provided.
            </exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertWebhookData(System.Object)">
            <summary>
            Converts the webhook data to a <see cref="T:MongoDB.Bson.BsonDocument"/> that can
            be stored in the MongoDB database.
            </summary>
            <param name="data">
            The data component of the webhook to convert.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertValue(System.Object)">
            <summary>
            Converts a single value to a <see cref="T:MongoDB.Bson.BsonValue"/> that can be
            stored in the MongoDB database.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns></returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.LogResultAsync(Deveel.Webhooks.IWebhookSubscription,Deveel.Webhooks.WebhookDeliveryResult{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore">
            <summary>
            A default implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultStore`1"/>
            that uses the <see cref="T:Deveel.Webhooks.MongoWebhookDeliveryResult"/> as the entity
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore.#ctor(Deveel.Webhooks.IMongoDbWebhookContext)">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context to the MongoDB database.
            </param>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultStore`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`1.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions},Finbuckle.MultiTenant.IMultiTenantStore{`0})">
            <summary>
            Constructs the store with the given store.
            </summary>
            <param name="options">
            The set of options that are used to configure the connection to the store.
            </param>
            <param name="tenantStore">
            The store that provides access to the tenants.
            </param>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultStore`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TResult">
            The type of the result that is stored in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.#ctor(Deveel.Webhooks.IMongoDbWebhookContext)">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context to the MongoDB database.
            </param>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.Results">
            <summary>
            Gets the set of results stored in the database.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.AsQueryable">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.CountAllAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1.FindByWebhookIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultStoreProvider`1"/>
            that is resolving instances of <see cref="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore`1"/> based
            on the tenant identifier.
            </summary>
            <typeparam name="TTenantInfo">
            The type of tenant that owns the connection to the MongoDB database
            </typeparam>
            <typeparam name="TResult">
            The type of the result that is stored in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions},Finbuckle.MultiTenant.IMultiTenantStore{`0})">
            <summary>
            Constructs the provider with the given tenant store.
            </summary>
            <param name="options">
            The configured options for the connection to the MongoDB database.
            </param>
            <param name="tenantStore">
            The store that is used to resolve the tenant information.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.Finalize">
            <summary>
            Destroys the instance of the provider.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.ThrowIfDisposed">
            <summary>
            Throws an exception if the instance of the provider is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the instance of the provider is disposed.
            </exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.GetTenantStore(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.Dispose(System.Boolean)">
            <summary>
            Disposes the instance of the provider.
            </summary>
            <param name="disposing">
            A flag indicating if the provider is disposing.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultStoreProvider`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookOptions.ConnectionString">
            <summary>
            Gets or sets the connection string to the MongoDB database,
            when not in a multi-tenant context.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookOptions.DatabaseName">
            <summary>
            A default name of the database to use when not
            provided in the connection string.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookOptions.BuildMongoUrl(System.String)">
            <summary>
            Builds a URL to a mongo server using the connection string
            provided and the configurations set in this object.
            </summary>
            <param name="connectionString">
            The connection string to the MongoDB database.
            </param>
            <returns>
            Returns an instance of <see cref="T:MongoDB.Driver.MongoUrl"/> that is
            used to connect to the database server.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookOptions.BuildMongoUrl">
            <summary>
            Builds a URL to a mongo server using the configurations
            provided by this object.
            </summary>
            <returns>
            Returns an instance of <see cref="T:MongoDB.Driver.MongoUrl"/> that is
            configured from the options set
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the connection string to the database is not specified or
            if the name of the database is not specified.
            </exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookOptions.BuildConnection">
            <summary>
            Builds a connection to a mongo server using the configurations
            provided by this object.
            </summary>
            <returns>
            Returns a new instance of <see cref="T:MongoFramework.MongoDbConnection"/> that
            is used to connect to the database server.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookOptions.BuildConnection(System.String)">
            <summary>
            Builds a connection to a mongo server using the connection string
            provided and the configurations set in this object.
            </summary>
            <param name="connectionString">
            The connection string to the MongoDB database.
            </param>
            <returns>
            Returns a new instance of <see cref="T:MongoFramework.MongoDbConnection"/> that
            is used to connect to the database server.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1">
            <summary>
            Provides a builder to configure the MongoDB storage of webhook entities
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription entity to store in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.Configure(System.String)">
            <summary>
            Configures the MongoDB storage context using a section
            from the application configuration.
            </summary>
            <param name="sectionPath">
            The path to the section in the configuration that contains
            the connection string to the MongoDB database.
            </param>
            <returns>
            Returns this instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.Configure(System.Action{Deveel.Webhooks.MongoDbWebhookOptions})">
            <summary>
            Configures the MongoDB storage context using the given function
            </summary>
            <param name="configure">
            The configuration function to use to configure the storage context.
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.WithConnectionString(System.String)">
            <summary>
            Configures the connection string to the MongoDB database
            </summary>
            <param name="connectionString">
            The connection string to the MongoDB database.
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.WithConnectionStringName(System.String)">
            <summary>
            Configures the storage system to use the connection
            string with the given name from the application configuration.
            </summary>
            <param name="connectionStringName">
            The name of the connection string to use from the application configuration.
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseMultiTenant``1">
            <summary>
            Changes the scope of the storage to use multi-tenant
            infrastructure for connecting to the MongoDB databases
            of each tenant.
            </summary>
            <typeparam name="TTenantInfo">
            The type of tenant information resolved, that is holding
            the connection string to the MongoDB database of each tenant.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseMultiTenant">
            <summary>
            Changes the scope of the storage to use multi-tenant
            infrastructure for connecting to the MongoDB databases
            of each tenant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseSubscriptionStore``1">
            <summary>
            Registers the given type of storage to be used for
            storing the webhook subscriptions.
            </summary>
            <typeparam name="TStore">
            The type of the storage to use for storing the webhook subscriptions,
            that is derived from <see cref="T:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore"/>.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultStore``1">
            <summary>
            Registers the given type of storage to be used for
            storing the webhook delivery results.
            </summary>
            <typeparam name="TStore">
            The type of the storage to use for storing the webhook delivery results,
            derived from <see cref="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultStore"/>.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultLogger``2">
            <summary>
            Registers an implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/>
            that is using MongoDB as the storage for the webhook delivery results.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered.
            </typeparam>
            <typeparam name="TResult">
            The type of the webhook delivery result that is being logged.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultLogger``1">
            <summary>
            Registers an implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/>
            that is using MongoDB as the storage for the webhook delivery results.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseWebhookConverter``2">
            <summary>
            Registers a service that is used to convert the webhook
            of the given type to a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object
            that can be stored by a logger.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered and that
            can be converted to a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object.
            </typeparam>
            <typeparam name="TConverter">
            The type of the service that is used to convert the webhook
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookStorageConstants">
            <summary>
            Provides a set of constants for the MongoDB storage of webhook entities
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.DefaultDatabaseName">
            <summary>
            The default database name, when not provided in the connection string.
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.SubscriptionCollectionName">
            <summary>
            The default name of the collection that stores the subscriptions.
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.DeliveryResultsCollectionName">
            <summary>
            The default name of the collection that stores the delivery results.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`1">
            <summary>
            A default implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionStoreProvider`1"/>
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`1.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions},Finbuckle.MultiTenant.IMultiTenantStore{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2">
            <summary>
            A service that implements the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionStoreProvider`1"/>
            contract to resolve a store for a given tenant.
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information used to identify the MongoDB database
            </typeparam>
            <typeparam name="TSubscription">
            The type of the subscription to store.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions},Finbuckle.MultiTenant.IMultiTenantStore{`0})">
            <summary>
            Constructs a new instance of the store provider.
            </summary>
            <param name="options">
            The set of options that are used to configure the connection to the store.
            </param>
            <param name="tenantStore">
            The store that provides access to the tenants information.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.Finalize">
            <summary>
            Destroyes the provider.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.ThrowIfDisposed">
            <summary>
            Throws an exception if the provider instance was disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the provider instance was disposed.
            </exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.GetTenantStore(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.Dispose(System.Boolean)">
            <summary>
            Disposes the provider instance.
            </summary>
            <param name="disposing">
            A flag indicating if the provider is disposing.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStoreProvider`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionStore`1"/>
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore.#ctor(Deveel.Webhooks.IMongoDbWebhookContext)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionStore`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TSubscription">
            The type of the webhook subscription, that is
            derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.#ctor(Deveel.Webhooks.IMongoDbWebhookContext)">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context that is used to access the MongoDB database.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="context"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.Subscriptions">
            <summary>
            Gets a set that is used to access the webhook subscriptions
            stored in the database.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.AsQueryable">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.CountAllAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.GetByEventTypeAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.GetPageAsync(Deveel.Webhooks.PagedQuery{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.SetStatusAsync(`0,Deveel.Webhooks.WebhookSubscriptionStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionStrore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookTenantContext`1">
            <summary>
            Represents a multi-tenant MongoDB context that can be used to
            access to tenant-specific databases
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext`1.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Webhooks.MongoDbWebhookOptions},Finbuckle.MultiTenant.IMultiTenantContext{`0})">
            <summary>
            Constructs the context with the given options and the current tenant
            retrieved from the provided <see cref="T:Finbuckle.MultiTenant.IMultiTenantContext`1"/>.
            </summary>
            <param name="options">
            The set of options that are used to configure the connection to the store.
            </param>
            <param name="multiTenantContext">
            The context that provides access to the current tenant.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either the <paramref name="options"/> or the <paramref name="multiTenantContext"/>
            are <c>null</c>, or when it is not possible to retrieve the tenant information from the context.
            </exception>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookTenantContext`1.Options">
            <summary>
            Gets the set of options that are used to configure the connection to the store.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext`1.AfterDetectChanges">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext`1.Attach``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext`1.AttachRange``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext`1.OnConfigureMapping(MongoFramework.MappingBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhook">
            <summary>
            An implementation of the <see cref="T:Deveel.Webhooks.IWebhook"/> that is backed by a MongoDB database.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.WebhookId">
            <summary>
            Gets or sets the identifier of the event / webhook notified.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.TimeStamp">
            <summary>
            Gets or sets the timestamp of the event.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.Data">
            <summary>
            Gets or sets the data of the event.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookDeliveryAttempt">
            <summary>
            The model of a delivery attempt of a webhook that is
            stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.ResponseStatusCode">
            <summary>
            Gets or sets the code returned by the remote endpoint
            when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.ResponseMessage">
            <summary>
            Gets or sets the message returned by the remote endpoint
            when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.StartedAt">
            <summary>
            Gets or sets the time-stamp when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.EndedAt">
            <summary>
            Gets or sets the time-stamp when the delivery attempt ended.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookDeliveryResult">
            <summary>
            The model of a delivery result of a webhook that is
            stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Id">
            <summary>
            Gets or sets the identifier of the delivery result entity.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Receiver">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Webhook">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.DeliveryAttempts">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.TenantId">
            <summary>
            Gets or sets the unique identifier of the tenant that owns
            the webhook
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookFilter">
            <summary>
            Represents a webhook filter that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookFilter.Expression">
            <summary>
            Gets or sets the expression used to filter the webhook
            to be delivered to a receiver.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookFilter.Format">
            <summary>
            Gets or sets the format of the expression
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookReceiver">
            <summary>
            An object that represents the information about a receiver
            of a webhook that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.DestinationUrl">
            <summary>
            Gets or sets the URL endpoint where the webhook
            was delivered.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.Headers">
            <summary>
            Gets or sets the list of headers that were sent
            alongside the webhook, if any.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.BodyFormat">
            <summary>
            Gets or sets the format of the body of the webhook
            (either 'json' or 'xml')
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.SubscriptionId">
            <summary>
            Gets or sets the unique identifier of the subscription
            that triggered the delivery of the webhook (if the webhook
            was actually notified from a subscription).
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.SubscriptionName">
            <summary>
            Gets or sets the name of the subscription that triggered
            the delivery of the webhook (if the webhook was actually
            notified from a subscription).
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookSubscription">
            <summary>
            An entity that represents a subscription to a webhook
            and that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Id">
            <summary>
            Gets or sets the identifier of the subscription entity.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Name">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.DestinationUrl">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Secret">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Status">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.LastStatusTime">
            <summary>
            Gets or sets the time when the last status of the subscription
            was set.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.TenantId">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.RetryCount">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Format">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.EventTypes">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.UpdatedAt">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.WebhookMongoException">
            <summary>
            An exception that is thrwn when an error occurs in the
            MongoDB storage.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.WebhookNotifierBuilderExtensions">
            <summary>
            Provides extensions to the <see cref="T:Deveel.Webhooks.WebhookNotifierBuilder`1"/>
            to register the MongoDB storage for the notifier.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookNotifierBuilderExtensions.UseMongoSubscriptionResolver``1(Deveel.Webhooks.WebhookNotifierBuilder{``0})">
            <summary>
            Registers the MongoDB storage for resolving
            webhook subscriptions to the notifier.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook to be notified.
            </typeparam>
            <param name="builder">
            The builder of the notifier service where to register
            the resolver.
            </param>
            <returns>
            Returns the builder to continue the configuration.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions">
            <summary>
            Provides extensions to the <see cref="T:Deveel.Webhooks.WebhookSubscriptionBuilder`1"/>
            to register the MongoDB storage.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0})">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1"/>
            used to further configure the storage.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0},System.String)">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions,
            using the given connection string to connect to the database.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <param name="connectionString">
            The connection string to be used to connect to the MongoDB database.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1"/>
            used to further configure the storage.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0},System.Action{Deveel.Webhooks.MongoDbWebhookStorageBuilder{``0}})">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions,
            that can be further configured using the given <paramref name="configure"/>
            function provided.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <param name="configure">
            The function used to configure the storage.
            </param>
            <returns>
            Returns the instance of <see cref="T:Deveel.Webhooks.WebhookSubscriptionBuilder`1"/>
            with the registered storage.
            </returns>
        </member>
    </members>
</doc>
