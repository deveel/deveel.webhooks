<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Webhooks.MongoDb</name>
    </assembly>
    <members>
        <member name="T:Deveel.Webhooks.DefaultMongoWebhookConverter`1">
            <summary>
            A default implementation of <see cref="T:Deveel.Webhooks.IMongoWebhookConverter`1"/> that
            attempts to convert the given webhook object into a <see cref="T:Deveel.Webhooks.MongoWebhook"/>
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook to convert into a <see cref="T:Deveel.Webhooks.MongoWebhook"/>.
            </typeparam>
            <remarks>
            This implementation is quite straightforward and it is configured to simply
            map the properties and data of a given event and webhook object to be stored
            into a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object.
            </remarks>
        </member>
        <member name="M:Deveel.Webhooks.DefaultMongoWebhookConverter`1.ConvertWebhook(Deveel.Webhooks.EventInfo,`0)">
            <summary>
            Converts the given <see cref="T:Deveel.Webhooks.EventInfo"/> and the webhook object into
            a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object.
            </summary>
            <param name="eventInfo">
            The event information that is being notified.
            </param>
            <param name="webhook">
            The webhook that was notified to the subscribers.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoWebhook"/> that represents the
            webhook that can be stored into the database.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.IMongoDbWebhookContext">
            <summary>
            Represents an instance of the <see cref="T:MongoFramework.IMongoDbContext"/> that
            is specific for the Webhooks service.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.IMongoWebhookConverter`1">
            <summary>
            A service that is used to convert a webhook to an
            object that can be stored in a MongoDB database.
            </summary>
            <typeparam name="TWebhook">
            The type of webhook to convert.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.IMongoWebhookConverter`1.ConvertWebhook(Deveel.Webhooks.EventInfo,`0)">
            <summary>
            Converts the given webhook to an object that can be stored
            in a MongoDB database.
            </summary>
            <param name="eventInfo">
            The information about the event that triggered the
            notification of the webhook.
            </param>
            <param name="webhook">
            The instance of the webhook to be converted.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoWebhook"/>
            that can be stored in a MongoDB database.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookContext">
            <summary>
            A default instance of the <see cref="T:Deveel.Webhooks.IMongoDbWebhookContext"/> that
            is used to store the subscriptions and delivery results.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookContext.#ctor(Deveel.Data.IMongoDbConnection{Deveel.Webhooks.MongoDbWebhookContext})">
            <summary>
            Creates an instance of the context with the given options.
            </summary>
            <param name="connection">
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookContext.OnConfigureMapping(MongoFramework.MappingBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`2">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultRepositoryProvider`1"/>
            that is resolving instances of <see cref="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository`1"/> based
            on the tenant identifier.
            </summary>
            <typeparam name="TTenantInfo">
            The type of tenant that owns the connection to the MongoDB database
            </typeparam>
            <typeparam name="TResult">
            The type of the result that is stored in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`2.#ctor(System.Collections.Generic.IEnumerable{Finbuckle.MultiTenant.IMultiTenantStore{`0}},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructs the provider with the given tenant store.
            </summary>
            <param name="tenantStore">
            The store that is used to resolve the tenant information.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`2.GetRepositoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`2.CreateRepository(Deveel.Webhooks.MongoDbWebhookTenantContext)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2">
            <summary>
            An implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/> that
            is backed by a MongoDB database.
            </summary>
            <typeparam name="TWebhook">
            The type of webhook for which the delivery results are logged.
            </typeparam>
            <typeparam name="TResult">
            The type of delivery result to log.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.#ctor(Deveel.Webhooks.IWebhookDeliveryResultRepositoryProvider{`1},Deveel.Webhooks.IMongoWebhookConverter{`0},Microsoft.Extensions.Logging.ILogger{Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger{`0,`1}})">
            <summary>
            Constructs the logger with the given store provider
            used to resolve the MongoDB storage for the log.
            </summary>
            <param name="storeProvider">
            The provider of the store used to resolve the MongoDB storage
            where to log the delivery results.
            </param>
            <param name="webhookConverter">
            A service that is used to convert the webhook object to a MongoDB
            compatible object for storage.
            </param>
            <param name="logger">
            An optional logger to use to log messages emitted by this service.
            </param>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.StoreProvider">
            <summary>
            Gets the provider used to resolve the MongoDB storage where to log
            the delivery results.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.Logger">
            <summary>
            Gets the logger used to log messages emitted by this service.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertResult(Deveel.Webhooks.EventInfo,Deveel.Webhooks.IWebhookSubscription,Deveel.Webhooks.WebhookDeliveryResult{`0})">
            <summary>
            Converts the given result to an object that can be stored in the
            MongoDB database collection.
            </summary>
            <param name="eventInfo">
            The information about the event that triggered the delivery of the webhook.
            </param>
            <param name="subscription">
            The subscription for which the delivery result is logged.
            </param>
            <param name="result">
            The result of the delivery of a webhook.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.CreateEvent(Deveel.Webhooks.EventInfo)">
            <summary>
            Converts the given webhook object to a MongoDB compatible object
            </summary>
            <param name="eventInfo">
            The information about the event that triggered the delivery of the webhook.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoEventInfo"/> that can be stored
            in a MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.CreateReceiver(Deveel.Webhooks.IWebhookSubscription)">
            <summary>
            Converts a subscription object to a receiver object that can be
            stored in the MongoDB database collection.
            </summary>
            <param name="subscription"></param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoWebhookReceiver"/> that can be
            stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertDeliveryAttempt(Deveel.Webhooks.WebhookDeliveryAttempt)">
            <summary>
            Converts the given delivery attempt to an object that can be stored
            </summary>
            <param name="attempt">
            The delivery attempt to convert.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.ConvertWebhook(Deveel.Webhooks.EventInfo,`0)">
            <summary>
            Converts the given webhook to an object that can be stored in the
            MongoDB database collection.
            </summary>
            <param name="eventInfo">
            The information about the event that triggered the delivery of the webhook.
            </param>
            <param name="webhook">
            The instance of the webhook to convert.
            </param>
            <returns>
            Returns an object that can be stored in the MongoDB database collection.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the given type of webhook is not supported by this instance and
            no converter was provided.
            </exception>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultLogger`2.LogResultAsync(Deveel.Webhooks.EventInfo,Deveel.Webhooks.IWebhookSubscription,Deveel.Webhooks.WebhookDeliveryResult{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository">
            <summary>
            A default implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultRepository`1"/>
            that uses the <see cref="T:Deveel.Webhooks.MongoWebhookDeliveryResult"/> as the entity
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository.#ctor(Deveel.Webhooks.MongoDbWebhookContext)">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context to the MongoDB database.
            </param>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultRepository`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepositoryProvider`1.#ctor(System.Collections.Generic.IEnumerable{Finbuckle.MultiTenant.IMultiTenantStore{`0}},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructs the store with the given store.
            </summary>
            <param name="tenantStore">
            The store that provides access to the tenants.
            </param>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultRepository`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TResult">
            The type of the result that is stored in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository`1.#ctor(Deveel.Webhooks.IMongoDbWebhookContext,Microsoft.Extensions.Logging.ILogger{Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository{`0}})">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context to the MongoDB database.
            </param>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository`1.Results">
            <summary>
            Gets the set of results stored in the database.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository`1.FindByWebhookIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1">
            <summary>
            Provides a builder to configure the MongoDB storage of webhook entities
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription entity to store in the database.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.WithConnectionString(System.String)">
            <summary>
            Configures the connection string to the MongoDB database
            </summary>
            <param name="connectionString">
            The connection string to the MongoDB database.
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.WithConnectionStringName(System.String)">
            <summary>
            Configures the storage system to use the connection
            string with the given name from the application configuration.
            </summary>
            <param name="connectionStringName">
            The name of the connection string to use from the application configuration.
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseMultiTenant``1">
            <summary>
            Changes the scope of the storage to use multi-tenant
            infrastructure for connecting to the MongoDB databases
            of each tenant.
            </summary>
            <typeparam name="TTenantInfo">
            The type of tenant information resolved, that is holding
            the connection string to the MongoDB database of each tenant.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseMultiTenant">
            <summary>
            Changes the scope of the storage to use multi-tenant
            infrastructure for connecting to the MongoDB databases
            of each tenant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseSubscriptionStore``1">
            <summary>
            Registers the given type of storage to be used for
            storing the webhook subscriptions.
            </summary>
            <typeparam name="TStore">
            The type of the storage to use for storing the webhook subscriptions,
            that is derived from <see cref="T:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository"/>.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultStore``1">
            <summary>
            Registers the given type of storage to be used for
            storing the webhook delivery results.
            </summary>
            <typeparam name="TStore">
            The type of the storage to use for storing the webhook delivery results,
            derived from <see cref="T:Deveel.Webhooks.MongoDbWebhookDeliveryResultRepository"/>.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultLogger``2">
            <summary>
            Registers an implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/>
            that is using MongoDB as the storage for the webhook delivery results.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered.
            </typeparam>
            <typeparam name="TResult">
            The type of the webhook delivery result that is being logged.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseDeliveryResultLogger``1">
            <summary>
            Registers an implementation of <see cref="T:Deveel.Webhooks.IWebhookDeliveryResultLogger`1"/>
            that is using MongoDB as the storage for the webhook delivery results.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered.
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseWebhookConverter``2">
            <summary>
            Registers a service that is used to convert the webhook
            of the given type to a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object
            that can be stored by a logger.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered and that
            can be converted to a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object.
            </typeparam>
            <typeparam name="TConverter">
            The type of the service that is used to convert the webhook
            </typeparam>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1.UseWebhookConverter``1(System.Func{Deveel.Webhooks.EventInfo,``0,Deveel.Webhooks.MongoWebhook})">
            <summary>
            Registers a function that is used to convert the webhook
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook that is being delivered and that
            should be converted to a <see cref="T:Deveel.Webhooks.MongoWebhook"/> object.
            </typeparam>
            <param name="converter">
            The function that is used to convert the webhook
            </param>
            <returns>
            Returns the current instance of the builder for chaining.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookStorageConstants">
            <summary>
            Provides a set of constants for the MongoDB storage of webhook entities
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.DefaultDatabaseName">
            <summary>
            The default database name, when not provided in the connection string.
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.SubscriptionCollectionName">
            <summary>
            The default name of the collection that stores the subscriptions.
            </summary>
        </member>
        <member name="F:Deveel.Webhooks.MongoDbWebhookStorageConstants.DeliveryResultsCollectionName">
            <summary>
            The default name of the collection that stores the delivery results.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionRepository`1"/>
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository.#ctor(Deveel.Webhooks.IMongoDbWebhookContext,Microsoft.Extensions.Logging.ILogger{Deveel.Webhooks.MongoDbWebhookSubscriptionRepository})">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`2">
            <summary>
            A default implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionRepositoryProvider`1"/>
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`2.#ctor(System.Collections.Generic.IEnumerable{Finbuckle.MultiTenant.IMultiTenantStore{`1}},Microsoft.Extensions.Logging.ILoggerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`2.GetRepositoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`3">
            <summary>
            A service that implements the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionRepositoryProvider`1"/>
            contract to resolve a store for a given tenant.
            </summary>
            <typeparam name="TTenantInfo">
            The type of the tenant information used to identify the MongoDB database
            </typeparam>
            <typeparam name="TSubscription">
            The type of the subscription to store.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`3.#ctor(System.Collections.Generic.IEnumerable{Finbuckle.MultiTenant.IMultiTenantStore{`2}},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructs a new instance of the store provider.
            </summary>
            <param name="tenantStore">
            The store that provides access to the tenants information.
            </param>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`3.CreateRepository(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepositoryProvider`3.GetRepositoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1">
            <summary>
            Provides an implementation of the <see cref="T:Deveel.Webhooks.IWebhookSubscriptionRepository`1"/>
            that is backed by a MongoDB database.
            </summary>
            <typeparam name="TSubscription">
            The type of the webhook subscription, that is
            derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.#ctor(Deveel.Webhooks.IMongoDbWebhookContext,Microsoft.Extensions.Logging.ILogger{Deveel.Webhooks.MongoDbWebhookSubscriptionRepository{`0}})">
            <summary>
            Constructs the store with the given context.
            </summary>
            <param name="context">
            The context that is used to access the MongoDB database.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="context"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.Subscriptions">
            <summary>
            Gets a set that is used to access the webhook subscriptions
            stored in the database.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.AsQueryable">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.GetDestinationUrlAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.SetDestinationUrlAsync(`0,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.GetByEventTypeAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.GetEventTypesAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.AddEventTypesAsync(`0,System.String[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.RemoveEventTypesAsync(`0,System.String[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.SetStatusAsync(`0,Deveel.Webhooks.WebhookSubscriptionStatus,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.GetHeadersAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.AddHeadersAsync(`0,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookSubscriptionRepository`1.RemoveHeadersAsync(`0,System.String[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoDbWebhookTenantContext">
            <summary>
            Represents a multi-tenant MongoDB context that can be used to
            access to tenant-specific databases
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.MongoDbWebhookTenantContext.OnConfigureMapping(MongoFramework.MappingBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoEventInfo">
            <summary>
            Provides an implementation of <see cref="T:Deveel.Webhooks.IEventInfo"/> that is
            capable of being stored in a MongoDB database.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.Subject">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.EventType">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.EventId">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.TimeStamp">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.DataVersion">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoEventInfo.EventData">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhook">
            <summary>
            An implementation of the <see cref="T:Deveel.Webhooks.IWebhook"/> that is backed by a MongoDB database.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.WebhookId">
            <summary>
            Gets or sets the identifier of the event / webhook notified.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.TimeStamp">
            <summary>
            Gets or sets the timestamp of the event.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhook.Data">
            <summary>
            Gets or sets the data of the event.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookDeliveryAttempt">
            <summary>
            The model of a delivery attempt of a webhook that is
            stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.ResponseStatusCode">
            <summary>
            Gets or sets the code returned by the remote endpoint
            when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.ResponseMessage">
            <summary>
            Gets or sets the message returned by the remote endpoint
            when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.StartedAt">
            <summary>
            Gets or sets the time-stamp when the delivery was attempted.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryAttempt.EndedAt">
            <summary>
            Gets or sets the time-stamp when the delivery attempt ended.
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookDeliveryResult">
            <summary>
            The model of a delivery result of a webhook that is
            stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Id">
            <summary>
            Gets or sets the identifier of the delivery result entity.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.EventInfo">
            <summary>
            Gets or sets the information on the event that
            triggered the notification.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.OperationId">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Receiver">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.Webhook">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.DeliveryAttempts">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookDeliveryResult.TenantId">
            <summary>
            Gets or sets the unique identifier of the tenant that owns
            the webhook
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookFilter">
            <summary>
            Represents a webhook filter that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookFilter.Expression">
            <summary>
            Gets or sets the expression used to filter the webhook
            to be delivered to a receiver.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookFilter.Format">
            <summary>
            Gets or sets the format of the expression
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookReceiver">
            <summary>
            An object that represents the information about a receiver
            of a webhook that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.DestinationUrl">
            <summary>
            Gets or sets the URL endpoint where the webhook
            was delivered.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.Headers">
            <summary>
            Gets or sets the list of headers that were sent
            alongside the webhook, if any.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.BodyFormat">
            <summary>
            Gets or sets the format of the body of the webhook
            (either 'json' or 'xml')
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.SubscriptionId">
            <summary>
            Gets or sets the unique identifier of the subscription
            that triggered the delivery of the webhook (if the webhook
            was actually notified from a subscription).
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookReceiver.SubscriptionName">
            <summary>
            Gets or sets the name of the subscription that triggered
            the delivery of the webhook (if the webhook was actually
            notified from a subscription).
            </summary>
        </member>
        <member name="T:Deveel.Webhooks.MongoWebhookSubscription">
            <summary>
            An entity that represents a subscription to a webhook
            and that is stored in a MongoDB storage.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Id">
            <summary>
            Gets or sets the identifier of the subscription entity.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Name">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.DestinationUrl">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Secret">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Status">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.LastStatusTime">
            <summary>
            Gets or sets the time when the last status of the subscription
            was set.
            </summary>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.TenantId">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.RetryCount">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Headers">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Format">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.EventTypes">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Webhooks.MongoWebhookSubscription.UpdatedAt">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.WebhookMongoException">
            <summary>
            An exception that is thrwn when an error occurs in the
            MongoDB storage.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Webhooks.WebhookMongoException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Webhooks.WebhookNotifierBuilderExtensions">
            <summary>
            Provides extensions to the <see cref="T:Deveel.Webhooks.WebhookNotifierBuilder`1"/>
            to register the MongoDB storage for the notifier.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookNotifierBuilderExtensions.UseMongoSubscriptionResolver``1(Deveel.Webhooks.WebhookNotifierBuilder{``0})">
            <summary>
            Registers the MongoDB storage for resolving
            webhook subscriptions to the notifier.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook to be notified.
            </typeparam>
            <param name="builder">
            The builder of the notifier service where to register
            the resolver.
            </param>
            <returns>
            Returns the builder to continue the configuration.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.WebhookNotifierBuilderExtensions.UseMongoTenantSubscriptionResolver``1(Deveel.Webhooks.WebhookNotifierBuilder{``0})">
            <summary>
            Registers the MongoDB storage for resolving
            webhook subscriptions to the notifier.
            </summary>
            <typeparam name="TWebhook">
            The type of the webhook to be notified.
            </typeparam>
            <param name="builder">
            The builder of the notifier service where to register
            the resolver.
            </param>
            <returns>
            Returns the builder to continue the configuration.
            </returns>
        </member>
        <member name="T:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions">
            <summary>
            Provides extensions to the <see cref="T:Deveel.Webhooks.WebhookSubscriptionBuilder`1"/>
            to register the MongoDB storage.
            </summary>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0})">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1"/>
            used to further configure the storage.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0},System.String)">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions,
            using the given connection string to connect to the database.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <param name="connectionString">
            The connection string to be used to connect to the MongoDB database.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Webhooks.MongoDbWebhookStorageBuilder`1"/>
            used to further configure the storage.
            </returns>
        </member>
        <member name="M:Deveel.Webhooks.WebhookSubscriptionBuilderExtensions.UseMongoDb``1(Deveel.Webhooks.WebhookSubscriptionBuilder{``0},System.Action{Deveel.Webhooks.MongoDbWebhookStorageBuilder{``0}})">
            <summary>
            Registers the MongoDB storage for the webhook subscriptions,
            that can be further configured using the given <paramref name="configure"/>
            function provided.
            </summary>
            <typeparam name="TSubscription">
            The type of the subscription handled by the storage,
            that must be derived from <see cref="T:Deveel.Webhooks.MongoWebhookSubscription"/>.
            </typeparam>
            <param name="builder">
            The webhook subscription service builder used to register the storage.
            </param>
            <param name="configure">
            The function used to configure the storage.
            </param>
            <returns>
            Returns the instance of <see cref="T:Deveel.Webhooks.WebhookSubscriptionBuilder`1"/>
            with the registered storage.
            </returns>
        </member>
    </members>
</doc>
